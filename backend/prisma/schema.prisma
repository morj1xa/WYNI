generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ads {
  id          Int         @id @default(autoincrement())
  title       String      @db.VarChar(255)
  description String
  price       Decimal     @db.Decimal(10, 2)
  user_id     Int?
  category_id Int?
  location    String?     @db.VarChar(255)
  created_at  DateTime?   @default(now()) @db.Timestamp(6)
  updated_at  DateTime?   @default(now()) @db.Timestamp(6)
  categories  categories? @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  users       users?      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  favorites   favorites[]
  images      images[]
  messages    messages[]
  orders      orders[]
}

model categories {
  id               Int          @id @default(autoincrement())
  name             String       @unique @db.VarChar(100)
  parent_id        Int?
  ads              ads[]
  categories       categories?  @relation("categoriesTocategories", fields: [parent_id], references: [id], onUpdate: NoAction)
  other_categories categories[] @relation("categoriesTocategories")
}

model favorites {
  user_id    Int
  ad_id      Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  ads        ads       @relation(fields: [ad_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, ad_id])
}

model images {
  id        Int    @id @default(autoincrement())
  ad_id     Int?
  image_url String
  ads       ads?   @relation(fields: [ad_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model messages {
  id                                Int       @id @default(autoincrement())
  sender_id                         Int?
  receiver_id                       Int?
  ad_id                             Int?
  message                           String
  sent_at                           DateTime? @default(now()) @db.Timestamp(6)
  ads                               ads?      @relation(fields: [ad_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_messages_receiver_idTousers users?    @relation("messages_receiver_idTousers", fields: [receiver_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_messages_sender_idTousers   users?    @relation("messages_sender_idTousers", fields: [sender_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model orders {
  id                            Int       @id @default(autoincrement())
  buyer_id                      Int?
  seller_id                     Int?
  ad_id                         Int?
  status                        String    @default("pending") @db.VarChar(50)
  created_at                    DateTime? @default(now()) @db.Timestamp(6)
  ads                           ads?      @relation(fields: [ad_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_orders_buyer_idTousers  users?    @relation("orders_buyer_idTousers", fields: [buyer_id], references: [id], onUpdate: NoAction)
  users_orders_seller_idTousers users?    @relation("orders_seller_idTousers", fields: [seller_id], references: [id], onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  id                                    Int       @id @default(autoincrement())
  reviewer_id                           Int?
  reviewed_user_id                      Int?
  rating                                Int
  comment                               String?
  created_at                            DateTime? @default(now()) @db.Timestamp(6)
  users_reviews_reviewed_user_idTousers users?    @relation("reviews_reviewed_user_idTousers", fields: [reviewed_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_reviews_reviewer_idTousers      users?    @relation("reviews_reviewer_idTousers", fields: [reviewer_id], references: [id], onUpdate: NoAction)
}

model users {
  id                                      Int         @id @default(autoincrement())
  username                                String      @unique @db.VarChar(50)
  email                                   String      @unique @db.VarChar(100)
  password_hash                           String
  phone                                   String?     @db.VarChar(20)
  created_at                              DateTime?   @default(now()) @db.Timestamp(6)
  ads                                     ads[]
  favorites                               favorites[]
  messages_messages_receiver_idTousers    messages[]  @relation("messages_receiver_idTousers")
  messages_messages_sender_idTousers      messages[]  @relation("messages_sender_idTousers")
  orders_orders_buyer_idTousers           orders[]    @relation("orders_buyer_idTousers")
  orders_orders_seller_idTousers          orders[]    @relation("orders_seller_idTousers")
  reviews_reviews_reviewed_user_idTousers reviews[]   @relation("reviews_reviewed_user_idTousers")
  reviews_reviews_reviewer_idTousers      reviews[]   @relation("reviews_reviewer_idTousers")
}
